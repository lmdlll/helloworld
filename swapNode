package Node;

/**
 * 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。
 *
 * 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
 *
 * 示例:
 * 给定 1->2->3->4, 你应该返回 2->1->4->3.
 */

public class Swap {
//4ms
    public ListNode swapPairs(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode res = new ListNode(0);
        res.next = head;
        ListNode p = res;
        while (res.next!=null &&res.next.next!=null){
            ListNode slow = res.next;
            ListNode fast = slow.next;
            slow.next = fast.next;
            fast.next = slow;
            res.next = fast;
            res = slow;
        }
        return p.next;
    }
//……
    public ListNode swapPairsi(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode tmp;
        ListNode h = new ListNode(0);
        h.next=head;
        ListNode pre = h;
        while(pre.next != null && pre.next.next != null) {
            tmp= pre.next;
            pre.next=tmp.next;
            tmp.next=tmp.next.next;
            pre.next.next= tmp;
            pre=tmp;
        }
        return h.next;

    }
//类似
    public ListNode swapPairsii(ListNode head) {

        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        ListNode p = dummyHead;
        while(p.next != null && p.next.next != null ){
            ListNode node1 = p.next;
            ListNode node2 = node1.next;
            ListNode next = node2.next;
            node2.next = node1;
            node1.next = next;
            p.next = node2;
            p = node1;
        }

        return dummyHead.next;
    }
}
