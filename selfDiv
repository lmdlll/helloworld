package Array;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * 自除数 是指可以被它包含的每一位数除尽的数。
 *
 * 例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。
 *
 * 还有，自除数不允许包含 0 。
 *
 * 给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。
 *
 * 示例 1：
 *
 * 输入：
 * 上边界left = 1, 下边界right = 22
 * 输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
 *
 * 1,2,3,4,5,6,7,8,9,11,12,15,22,24,33,36
 *
 * 注意：
 * 每个输入参数的边界满足 1 <= left <= right <= 10000。
 */

public class selfDiv {
    public static void main(String[] args) {
        List<Integer> list = selfDividingNumbers(10,40);
        Iterator<Integer> iterator = list.iterator();
        while (iterator.hasNext()){
            System.out.print(iterator.next()+" ");
        }


    }
    public static List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> result = new ArrayList<>();
        if(left<1 || right>10000){
            return result;
        }
        for(int i=left; i<=right; i++){
            int count=0;
            int tmp = i;
            //几位数
            while (tmp!=0){
                tmp/=10;
                count++;
            }
            tmp = i;
            while (count>0){
                int s = tmp%10;
                if(s==0){
                    break;
                }
                if(i%s != 0){
                    break;
                }
                if(tmp/10==0){
                    result.add(i);
                }
                tmp /= 10;
                count--;
            }

        }


        return result;
    }


    public List<Integer> selfDividingNumbersi(int left, int right) {
        List<Integer> res = new ArrayList<>();
        for(;left<=right;left++) {
            if(isSelfDivid(left))
                res.add(left);
        }
        return res;
    }

    public boolean isSelfDivid(int val) {
        int rawNum = val;
        while (val!=0) {
            int gewei=(val%10);
            if(gewei==0)
                return false;
            if(rawNum%gewei!=0)
                return false;
            val/=10;
        }
        return true;
    }
}
