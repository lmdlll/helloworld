import java.util.Stack;

/**
 * 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
 *
 * 示例 1:
 * 输入: 123
 * 输出: 321
 *  示例 2:
 * 输入: -123
 * 输出: -321
 * 示例 3:
 * 输入: 120
 * 输出: 21
 * 注意:
 *
 * 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。
 * 请根据这个假设，如果反转后整数溢出那么就返回 0。
 */
class Sol {
    public int reverse(int x) {
        long result = 0;
        while (x!=0){
            result = result*10+ x%10;
            x /= 10;
        }
        if(result>Integer.MAX_VALUE || result<Integer.MIN_VALUE){
            return 0;
        }
        return (int)result;

        
    }
    
    //TODO:超范围
    public int code(int x){
        if(x>Integer.MAX_VALUE || x<Integer.MIN_VALUE){
            return 0;
        }
        Stack<Integer> stack = new Stack<>();
        long result = 0;
        //计算x是几位数
        int count = 0;
        int flag = 1;
        int tmp = x;
        if(x<0){
            flag = -1;
            tmp = flag*tmp;
        }
        while (tmp>0){
            tmp = tmp/10;
            count++;
        }
        tmp = x;

        //将数据压栈
        int counttmp = count;
        for(int i=0; i<count; i++){
            int div = Div(counttmp);
            stack.push((tmp/div));
            tmp %= div;
            counttmp--;
        }

        //出栈
        counttmp = count;
        for(int i=0; i<count; i++){
            int div = Div(counttmp);
            result += (stack.pop()*div);
            if(result>Integer.MAX_VALUE || result<Integer.MIN_VALUE){
                return 0;
            }
            counttmp--;
        }

        return (int)result;
    }
    public int Div(int count){
        int div = 1;
        while (count>1){
            div *= 10;
            count--;
        }
        return div;
    }
}


public class Resvers {
    public static void main(String[] args) {
        Sol sol = new Sol();
        System.out.println(sol.reverse(1534236469));
    }
}
