package Array;

import java.util.ArrayList;
import java.util.List;

/**
 * 给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。
 *
 *q w e r t y u i o p
 * a s d f g h j k l
 * z x c v b n m
 *
 * 示例：
 * 输入: ["Hello", "Alaska", "Dad", "Peace"]
 * 输出: ["Alaska", "Dad"]
 *
 *
 * 注意：
 * 你可以重复使用键盘上同一字符。
 * 你可以假设输入的字符串将只包含字母。
 */

public class keyBoard {
    public static void main(String[] args) {
        String[] data = new String[]{"Hello", "Alaska", "Dad", "Peace"};
        String[] result = findWords(data);
        for(String str: result){
            System.out.print(str+" ");
        }
    }
    public static String[] findWords(String[] words) {
        String[] result = new String[words.length];
        String line1 = "qwertyuiop";
        String line2 = "asdfghjkl";
        String line3 = "zxcvbnm";
        int j=0;
        int k=0;
        int count = 0;
        int flag = 0;
        for(int i=0; i<words.length; i++) {
            for (j = 0; j < line1.length(); j++) {
                String tmp1 = String.valueOf(line1.charAt(j));
                if (words[i].contains(tmp1)) {
                    for (int l2 = 0; l2 < line2.length(); l2++) {
                        String tmp2 = String.valueOf(line2.charAt(l2));
                        if (words[i].contains(tmp2)) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    for (int l3 = 0; l3 < line3.length(); l3++) {
                        String tmp3 = String.valueOf(line3.charAt(l3));
                        if (words[i].contains(String.valueOf(tmp3))) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    result[k] = words[i];
                    k++;
                    count++;
                    break;
                }
            }
            flag = 0;
            for (j = 0; j < line2.length(); j++) {
                String tmp1 = String.valueOf(line2.charAt(j));
                if (words[i].contains(tmp1)) {
                    for (int l2 = 0; l2 < line1.length(); l2++) {
                        String tmp2 = String.valueOf(line1.charAt(l2));
                        if (words[i].contains(tmp2)) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    for (int l3 = 0; l3 < line3.length(); l3++) {
                        String tmp3 = String.valueOf(line3.charAt(l3));
                        if (words[i].contains(String.valueOf(tmp3))) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    result[k] = words[i];
                    k++;
                    count++;
                    break;
                }
            }
            flag = 0;
            for (j = 0; j < line3.length(); j++) {
                String tmp1 = String.valueOf(line3.charAt(j));
                if (words[i].contains(tmp1)) {
                    for (int l2 = 0; l2 < line2.length(); l2++) {
                        String tmp2 = String.valueOf(line2.charAt(l2));
                        if (words[i].contains(tmp2)) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    for (int l3 = 0; l3 < line1.length(); l3++) {
                        String tmp3 = String.valueOf(line1.charAt(l3));
                        if (words[i].contains(String.valueOf(tmp3))) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                    result[k] = words[i];
                    k++;
                    count++;
                    break;
                }
            }
            flag = 0;
        }

        String[] res = new String[count];
        for(int i=0; i<count; i++){
            res[i] = result[i];
        }
        result = res;
        return result;
    }

    public static String[] findWordsi(String[] words) {
        String[] rows = new String[] { "qwertyuiop", "asdfghjkl", "zxcvbnm" };
        List<String> res = new ArrayList<>();
        for (String word : words) {
            String before = word;
            word = word.toLowerCase();
            int k = 0;
            boolean flag = true;
            for (int i = 0; i < word.length(); i++) {
                if(!flag) break;
                if(i==0){
                    if(rows[0].indexOf(word.charAt(i)) !=-1 ){
                        k = 0;
                    }else if (rows[1].indexOf(word.charAt(i))!=-1) {
                        k = 1;
                    }else if (rows[2].indexOf(word.charAt(i))!=-1) {
                        k = 2;
                    }
                }else{
                    if(rows[k].indexOf(word.charAt(i)) ==-1){
                        flag = false;
                    }
                }
            }
            if(flag){
                res.add(before);
            }
        }
        String[] rr = new String[res.size()];
        return res.toArray(rr);
    }
}
